import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'java'
//apply plugin: 'application'
//apply plugin: 'checkstyle'  // Recent checkstyle vesions are not JDK 1.6+ compatible

group 'org.web3j'
version '2.2.1'

sourceCompatibility = 1.6
targetCompatibility = 1.6

// We don't want any compiler warnings
compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

repositories {
    mavenCentral()
    jcenter()  // Shadow resides on JCenter
}

// See https://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing/
// exclude with: gradle clean build -x integrationTest
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}


dependencies {
    compile 'cz.msebera.android:httpclient:4.4.1.2',
            'com.fasterxml.jackson.core:jackson-databind:2.8.5',
            'io.reactivex:rxjava:1.2.2',
            'com.madgag.spongycastle:prov:1.54.0.0',
            'com.squareup:javapoet:1.7.0',
            'io.reactivex:rxjava:1.2.4'
    testCompile 'junit:junit:4.11',
            'org.mockito:mockito-core:1.10.19',
            'nl.jqno.equalsverifier:equalsverifier:2.1.7'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task createProperties(dependsOn: processResources) << {
    // if resources dir is empty we need to create this ourselves
    new File("$buildDir/resources/main/").mkdirs()

    new File("$buildDir/resources/main/version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p['timestamp'] = getTimestamp()
        p.store w, null
    }
}

def getTimestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S z")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(today)
}

classes {
    dependsOn createProperties
}


artifacts {
    archives sourcesJar
}